import{S as e,i as t,s as a,e as r,t as n,a as o,c as s,b as i,g as c,d as h,f as u,h as l,k as d,l as f,n as p}from"./client.2d2660bd.js";function y(e){let t,a,y,g,b,m,v,w,E,k,I,x,M,L,S,T,R,W,j,G,P,D,z,A,B,C,O,H,U,V="type Guitarist struct{Guitarist } //object\n\nfunc(m Musician) Run(){} // method\n\ntype Musician interface { Run()} //interface that uses the method\n",q="func Service(Musician){\n    fmt.Println(Musician)\n}\n";return{c(){t=r("h3"),a=n("I Love Go because of it's simplicity."),y=o(),g=r("br"),b=o(),m=r("div"),v=r("p"),w=n("What does this mean? I am referring to its api and it's ability to uncouple code.\r\nWhy is this important? Many developers are bound to the constraints\r\nto their language and tech stack.  The point is so that when your \r\nproject gets bigger you are not constrained to what you have already\r\ncreated.  \r\n"),E=r("br"),k=n("\r\nAn example of what I am referring to."),I=o(),x=r("pre"),M=r("code"),L=n(V),S=n("\r\n\r\n\r\nThe three bits of code that are stated are pretty simple.\r\nbut they are the building blocks to uncoupling code.\r\n"),T=r("ul"),R=r("li"),W=n("1. struct"),j=o(),G=r("li"),P=n("2. method"),D=o(),z=r("li"),A=n("3. interface"),B=n("\r\n\r\n\r\nThese are the components needed to uncouple your code.  \r\n\r\nLets say you are building a Service on Musican.\r\n"),C=r("pre"),O=r("code"),H=n(q),U=n("\r\n\r\nWe used the interface Musician to allow for any struct with run() to be passed.\r\nSo if we needed to pass another struct of data in we can.\r\n\r\nThis allows for not having to think about your data or concrete data type.\r\nSomething many languages you are tied to.\r\n\r\nI will go further in the next blog about packages and utilizing this method."),this.h()},l(e){t=s(e,"H3",{});var r=i(t);a=c(r,"I Love Go because of it's simplicity."),r.forEach(h),y=u(e),g=s(e,"BR",{}),b=u(e),m=s(e,"DIV",{class:!0});var n=i(m);v=s(n,"P",{});var o=i(v);w=c(o,"What does this mean? I am referring to its api and it's ability to uncouple code.\r\nWhy is this important? Many developers are bound to the constraints\r\nto their language and tech stack.  The point is so that when your \r\nproject gets bigger you are not constrained to what you have already\r\ncreated.  \r\n"),E=s(o,"BR",{}),k=c(o,"\r\nAn example of what I am referring to."),o.forEach(h),I=u(n),x=s(n,"PRE",{class:!0});var l=i(x);M=s(l,"CODE",{class:!0});var d=i(M);L=c(d,V),d.forEach(h),l.forEach(h),S=c(n,"\r\n\r\n\r\nThe three bits of code that are stated are pretty simple.\r\nbut they are the building blocks to uncoupling code.\r\n"),T=s(n,"UL",{});var f=i(T);R=s(f,"LI",{});var p=i(R);W=c(p,"1. struct"),p.forEach(h),j=u(f),G=s(f,"LI",{});var F=i(G);P=c(F,"2. method"),F.forEach(h),D=u(f),z=s(f,"LI",{});var J=i(z);A=c(J,"3. interface"),J.forEach(h),f.forEach(h),B=c(n,"\r\n\r\n\r\nThese are the components needed to uncouple your code.  \r\n\r\nLets say you are building a Service on Musican.\r\n"),C=s(n,"PRE",{class:!0});var K=i(C);O=s(K,"CODE",{class:!0});var N=i(O);H=c(N,q),N.forEach(h),K.forEach(h),U=c(n,"\r\n\r\nWe used the interface Musician to allow for any struct with run() to be passed.\r\nSo if we needed to pass another struct of data in we can.\r\n\r\nThis allows for not having to think about your data or concrete data type.\r\nSomething many languages you are tied to.\r\n\r\nI will go further in the next blog about packages and utilizing this method."),n.forEach(h),this.h()},h(){l(M,"class","svelte-1x927ki"),l(x,"class","svelte-1x927ki"),l(O,"class","svelte-1x927ki"),l(C,"class","svelte-1x927ki"),l(m,"class","body svelte-1x927ki")},m(e,r){d(e,t,r),f(t,a),d(e,y,r),d(e,g,r),d(e,b,r),d(e,m,r),f(m,v),f(v,w),f(v,E),f(v,k),f(m,I),f(m,x),f(x,M),f(M,L),f(m,S),f(m,T),f(T,R),f(R,W),f(T,j),f(T,G),f(G,P),f(T,D),f(T,z),f(z,A),f(m,B),f(m,C),f(C,O),f(O,H),f(m,U)},p:p,i:p,o:p,d(e){e&&h(t),e&&h(y),e&&h(g),e&&h(b),e&&h(m)}}}export default class extends e{constructor(e){super(),t(this,e,null,y,a,{})}}
